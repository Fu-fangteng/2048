#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <cmath>

using namespace std;
int scores = 0;
vector<vector<int>> surfaceBoard(4, vector<int>(4, 0));
vector<vector<int>> exponentBoard(4, vector<int>(4, 0));

void printBoard() // Done
{
    cout << "You score is: " << scores << endl;
    for (int i = 0; i < 4; i++)
    {
        for (int j = 0; j < 4; j++)
        {
            cout << surfaceBoard[i][j] << "\t";
        }
        cout << endl;
    }
    cout << "-------------------------" << endl;
}
void randomTile() // Done
{
    srand(time(0));

    // - Generate the value of a single tile

    int random = 0;
    int a = rand() % 10;
    if (a != 9)
        random = 1;
    else
        random = 2;

    // - Generate the values of row and col
    int index = 0;
    int count = 0;
    for (int i = 0; i < 4; ++i)
    {
        for (int j = 0; j < 4; ++j)
        {
            if (!exponentBoard[i][j])
                count++;
        }
    }

    bool fun = false;

    index = rand() % count + 1;
    for (int i = 0; i < 4; ++i)
    {
        for (int j = 0; j < 4; ++j)
        {
            if (!exponentBoard[i][j])
                index--;

            if (index == 0)
            {
                exponentBoard[i][j] = random;
                fun = true;
            }

            if (fun)
                index--;
        }
    }
}
void boardUpdate() // Done
{
    for (int i = 0; i < 4; ++i)
    {
        for (int j = 0; j < 4; ++j)
        {

            // - Change exponent into true value

            int a = exponentBoard[i][j];
            if (!a)
                surfaceBoard[i][j] = 0;
            else
                surfaceBoard[i][j] = int(pow(2, a));
        }
    }
}
// The follow function implements all the operations of the move
void upMove() // Done
{
    // Move
    for (int j = 0; j < 4; j++)
    {
        vector<int> subCol;
        for (int i = 0; i < 4; i++)
        {
            if (exponentBoard[i][j] != 0)
            {
                subCol.push_back(exponentBoard[i][j]);
                exponentBoard[i][j] = 0;
            }
        }
        int sizeOfSubrow = subCol.size();
        for (int i = 0; i < sizeOfSubrow; i++)
        {
            exponentBoard[i][j] = subCol[i];
        }
    }
    // Merge
    for (int j = 0; j < 4; j++)
    {
        for (int i = 0; i < 3;)
        {
            if (exponentBoard[i][j] == exponentBoard[i + 1][j] && exponentBoard[i][j] != 0)
            {
                exponentBoard[i][j] += 1;
                int score = exponentBoard[i][j];
                scores += pow(2, score);
                exponentBoard[i + 1][j] = 0;
                i += 2;
            }
            else
                i++;
        }
    }
    // Move
    for (int j = 0; j < 4; j++)
    {
        vector<int> subCol;
        for (int i = 0; i < 4; i++)
        {
            if (exponentBoard[i][j] != 0)
            {
                subCol.push_back(exponentBoard[i][j]);
                exponentBoard[i][j] = 0;
            }
        }
        int sizeOfSubrow = subCol.size();
        for (int i = 0; i < sizeOfSubrow; i++)
        {
            exponentBoard[i][j] = subCol[i];
        }
    }
}
void downMove() // Done
{
    // Move
    for (int j = 0; j < 4; j++)
    {
        vector<int> subCol;
        for (int i = 3; i >= 0; i--)
        {
            if (exponentBoard[i][j] != 0)
            {
                subCol.push_back(exponentBoard[i][j]);
                exponentBoard[i][j] = 0;
            }
        }
        int sizeOfSubrow = subCol.size();
        for (int i = 3; i >= 4 - sizeOfSubrow; i--)
        {
            exponentBoard[i][j] = subCol[3 - i];
        }
    }
    // Merge
    for (int j = 0; j < 4; j++)
    {
        for (int i = 3; i > 0;)
        {
            if (exponentBoard[i][j] == exponentBoard[i - 1][j] && exponentBoard[i][j] != 0)
            {
                exponentBoard[i][j] += 1;
                int score = exponentBoard[i][j];
                scores += pow(2, score);
                exponentBoard[i - 1][j] = 0;
                i -= 2;
            }
            else
                i--;
        }
    }
    // Move
    for (int j = 0; j < 4; j++)
    {
        vector<int> subCol;
        for (int i = 3; i >= 0; i--)
        {
            if (exponentBoard[i][j] != 0)
            {
                subCol.push_back(exponentBoard[i][j]);
                exponentBoard[i][j] = 0;
            }
        }
        int sizeOfSubrow = subCol.size();
        for (int i = 3; i >= 4 - sizeOfSubrow; i--)
        {
            exponentBoard[i][j] = subCol[3 - i];
        }
    }
}
void leftMove() // Done
{
    // Move
    for (int i = 0; i < 4; i++)
    {
        vector<int> subRow;
        for (int j = 0; j < 4; j++)
        {
            if (exponentBoard[i][j] != 0)
            {
                subRow.push_back(exponentBoard[i][j]);
                exponentBoard[i][j] = 0;
            }
        }
        int sizeOfSubrow = subRow.size();
        for (int j = 0; j < sizeOfSubrow; j++)
        {
            exponentBoard[i][j] = subRow[j];
        }
    }
    // Merge
    for (int i = 0; i < 4; i++)
    {
        for (int j = 0; j < 4;)
        {
            if (exponentBoard[i][j] == exponentBoard[i][j + 1] && exponentBoard[i][j] != 0)
            {
                exponentBoard[i][j] += 1;
                int score = exponentBoard[i][j];
                scores += pow(2, score);
                exponentBoard[i][j + 1] = 0;
                j += 2;
            }
            else
                j++;
        }
    }
    // Move
    for (int i = 0; i < 4; i++)
    {
        vector<int> subRow;
        for (int j = 0; j < 4; j++)
        {
            if (exponentBoard[i][j] != 0)
            {
                subRow.push_back(exponentBoard[i][j]);
                exponentBoard[i][j] = 0;
            }
        }
        int sizeOfSubrow = subRow.size();
        for (int j = 0; j < sizeOfSubrow; j++)
        {
            exponentBoard[i][j] = subRow[j];
        }
    }
}
void rightMove() // Done
{
    // Move
    for (int i = 0; i < 4; i++)
    {
        vector<int> subRow;
        for (int j = 3; j >= 0; j--)
        {
            if (exponentBoard[i][j] != 0)
            {
                subRow.push_back(exponentBoard[i][j]);
                exponentBoard[i][j] = 0;
            }
        }
        int sizeOfSubrow = subRow.size();
        for (int j = 3; j >= 4 - sizeOfSubrow; j--)
        {
            exponentBoard[i][j] = subRow[3 - j];
        }
    }
    // Merge
    for (int i = 0; i < 4; i++)
    {
        for (int j = 3; j >= 0;)
        {
            if (exponentBoard[i][j] == exponentBoard[i][j - 1] && exponentBoard[i][j] != 0)
            {
                exponentBoard[i][j] += 1;
                int score = exponentBoard[i][j];
                scores += pow(2, score);
                exponentBoard[i][j - 1] = 0;
                j -= 2;
            }
            else
                j--;
        }
    }
    // Move
    for (int i = 0; i < 4; i++)
    {
        vector<int> subRow;
        for (int j = 3; j >= 0; j--)
        {
            if (exponentBoard[i][j] != 0)
            {
                subRow.push_back(exponentBoard[i][j]);
                exponentBoard[i][j] = 0;
            }
        }
        int sizeOfSubrow = subRow.size();
        for (int j = 3; j >= 4 - sizeOfSubrow; j--)
        {
            exponentBoard[i][j] = subRow[3 - j];
        }
    }
}
void openningUI() // Done
{
    string start;
    randomTile();
    boardUpdate();
    cout << "               Hello young man.            " << endl;
    cout << "           Welcome to the world of 2048.           " << endl;
    cout << "Use W(up),A(left),S(down),D(right) to move the tiles.Press 'q' to quit." << endl;
    cout << "           Enter any key to start.         " << endl;
    cin >> start;
}
bool hasValidMove() // Done
{
    // Check row move
    for (int i = 0; i < 4; i++)
    {
        for (int j = 1; j < 3; j++)
        {
            if (exponentBoard[i][j] == exponentBoard[i][j - 1] || exponentBoard[i][j] == exponentBoard[i][j + 1])
                return true;
        }
    }
    // Check col move
    for (int i = 1; i < 3; i++)
    {
        for (int j = 0; j < 4; j++)
        {
            if (exponentBoard[i][j] == exponentBoard[i - 1][j] || exponentBoard[i][j] == exponentBoard[i + 1][j])
                return true;
        }
    }
    return false;
}
bool gameIsOver() // Done
{
    for (int i = 0; i < 4; i++)
    {
        for (int j = 0; j < 4; j++)
        {
            if (exponentBoard[i][j] == 0)
                return false;
        }
    }
    if (hasValidMove())
        return false;
    return true;
}
bool successful() // Done
{
    for (int i = 0; i < 4; i++)
    {
        for (int j = 0; j < 4; j++)
        {
            if (exponentBoard[i][j] == 11)
            {
                return true;
            }
        }
    }
    return false;
}
void closingUI() // Done
{

    cout << endl;
    cout << endl;
    cout << endl;
    cout << "Nice play." << endl;
    cout << "You have done a great job! You score is " << scores << endl;
    cout << endl;
    cout << endl;
    cout << endl;
}
void moveFunction(string move)
{
    if (move == "w")
    {
        upMove();
    }
    else if (move == "s")
    {
        downMove();
    }
    else if (move == "a")
    {
        leftMove();
    }
    else if (move == "d")
    {
        rightMove();
    }
}
bool isValidMove(string move) // Dones
{
    bool keyValid = move == "w" || move == "a" || move == "s" || move == "d";
    if (keyValid)
    {
        int copyScore = scores;
        vector<vector<int>> copyExBoard = exponentBoard;
        moveFunction(move);
        // Check if merge
        if (scores != copyScore)
        {
            return true;
        }
        // Check if move
        for (int i = 0; i < 4; i++)
        {
            for (int j = 0; j < 4; j++)
            {
                if (exponentBoard[i][j] != copyExBoard[i][j])
                {
                    return true;
                }
            }
        }
        return false;
    }
    return false;
}

int main()
{
    string move;
    openningUI();
    randomTile();
    boardUpdate();
    while (!gameIsOver())
    {
        printBoard();
        cout << "Your move: ";
        cin >> move;
        if (isValidMove(move))
        {
            moveFunction(move);
            if (successful())
            {
                cout << "Cangratulation!" << endl;
                closingUI();
                return 0;
            }
        }
        else
        {
            cout << endl;
            cout << endl;
            cout << "Invalid move." << endl;
            cout << endl;
            cout << endl;
            continue;
        }
        randomTile();
        boardUpdate();
    }
    printBoard();
    closingUI();
    return 0;
}
