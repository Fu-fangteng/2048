#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <cmath>

using namespace std;
vector<vector<int>> surfaceBoard(4, vector<int>(4, 0));
vector<vector<int>> exponentBoard(4, vector<int>(4, 0));

void printBoard()//Done
{
    for (int i = 0; i < 4; i++)
    {
        for (int j = 0; j < 4; j++)
        {
            cout << exponentBoard[i][j] << "  ";
        }
        cout << endl;
    }
    cout << "----------" << endl;
}
void randomTile() // Done
{
    srand(time(0));

    // - Generate the value of a single tile
    srand(time(0));
    int random = 0;
    int a = rand() % 10;
    if (a != 9)
        random = 1;
    else
        random = 2;

    // - Generate the values of row and col
    int index = 0;
    int count = 0;
    for (int i = 0; i < 4; ++i)
    {
        for (int j = 0; j < 4; ++j)
        {
            if (!exponentBoard[i][j])
                count++;
        }
    }

    index = rand() % count + 1;
    for (int i = 0; i < 4; ++i)
    {
        for (int j = 0; j < 4; ++j)
        {
            if (!exponentBoard[i][j])
                index--;
            if (index == 0)
                exponentBoard[i][j] = random;
        }
    }
}
void boardTransform() // Done
{
    for (int i = 0; i < 4; ++i)
    {
        for (int j = 0; j < 4; ++j)
        {

            // - Change exponent into true value

            int a = exponentBoard[i][j];
            if (!a)
                surfaceBoard[i][j] = 0;
            else
                surfaceBoard[i][j] = int(pow(2, a));
        }
    }
}
void mergeFunction()
{
}
void upMove()
{
}
void downMove()
{
}
void leftMove()
{
}
void rightMove()
{
}

void openningUI() // Done
{
    string start;
    randomTile();
    boardTransform();
    cout << "               Hello young man.            " << endl;
    cout << "           Welcome to the world of 2048.           " << endl;
    cout << "Use W(up),A(left),S(down),D(right) to move the tiles.Press 'q' to quit." << endl;
    cout << "           Enter any key to start.         " << endl;
    cin >> start;
}
bool hasValidMove()//Done
{
    // Check row move
    for (int i = 0; i < 4; i++)
    {
        for (int j = 1; j < 3; j++)
        {
            if (exponentBoard[i][j] == exponentBoard[i][j - 1] || exponentBoard[i][j] == exponentBoard[i][j + 1])
                return true;
        }
    }
    // Check col move
    for (int i = 1; i < 3; i++)
    {
        for (int j = 0; j < 4; j++)
        {
            if (exponentBoard[i][j] == exponentBoard[i - 1][j] || exponentBoard[i][j] == exponentBoard[i + 1][j])
                return true;
        }
    }
    return false;
}
bool gameIsOver()//Done
{
    for (int i = 0; i < 4; i++)
    {
        for (int j = 0; j < 4; j++)
        {
            if(exponentBoard[i][j]==0)
                return false;
        }
    }
    if (hasValidMove())
        return false;
    return true;
}
bool successful() // Done
{
    bool res = true;
    for (int i = 0; i < 4; i++)
    {
        for (int j = 0; j < 4; j++)
        {
            if (exponentBoard[i][j] != 11)
            {
                res = false;
            }
        }
    }
    return res;
}
void closingUI() // Done
{
    cout << "Nice play." << endl;
}
bool isValidMove(string move)
{
}
int main()
{
    string move;
    int scores = 0;
    openningUI();
    while (!gameIsOver())
    {
        randomTile();
        boardTransform();
        printBoard();
        cout << "Your move: " << endl;
        cin >> move;
        if (isValidMove(move))
        {
            if (move == "w")
            {
                upMove();
            }
            else if (move == "s")
            {
                downMove();
            }
            else if (move == "a")
            {
                leftMove();
            }
            else if (move == "d")
            {
                rightMove();
            }
            if (successful())
            {
                cout << "Cangratulation!" << endl;
                break;
            }
        }
        else
            cout << "Invalid move." << endl;
    }
    closingUI();

    return 0;
}
